<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Nexus - Multi-LLM Intelligence Platform</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            color: #e0e0e0;
            overflow-x: hidden;
            cursor: none;
        }

        .custom-cursor {
            width: 20px;
            height: 20px;
            border: 2px solid #silver;
            border-radius: 50%;
            position: fixed;
            pointer-events: none;
            z-index: 9999;
            transition: all 0.1s ease;
            background: rgba(192, 192, 192, 0.2);
        }

        .custom-cursor.hover {
            width: 40px;
            height: 40px;
            background: rgba(192, 192, 192, 0.4);
        }

        #canvas-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .navbar {
            position: fixed;
            top: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            z-index: 1000;
            padding: 20px 0;
            border-bottom: 1px solid rgba(192, 192, 192, 0.2);
        }

        .nav-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .logo {
            font-size: 28px;
            font-weight: bold;
            background: linear-gradient(45deg, #c0c0c0, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .nav-links {
            display: flex;
            gap: 30px;
        }

        .nav-links a {
            color: #e0e0e0;
            text-decoration: none;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-links a:hover {
            color: #c0c0c0;
            transform: translateY(-2px);
        }

        .nav-links a::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(45deg, #c0c0c0, #ffffff);
            transition: width 0.3s ease;
        }

        .nav-links a:hover::after {
            width: 100%;
        }

        .hero {
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero-content {
            max-width: 800px;
            z-index: 2;
            animation: fadeInUp 1s ease-out;
        }

        .hero h1 {
            font-size: 4rem;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #c0c0c0, #ffffff, #c0c0c0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            background-size: 200% 200%;
            animation: shimmer 3s ease-in-out infinite;
        }

        .hero p {
            font-size: 1.5rem;
            margin-bottom: 30px;
            color: #b0b0b0;
            line-height: 1.6;
        }

        .cta-button {
            background: linear-gradient(45deg, #2d2d2d, #4a4a4a);
            color: #ffffff;
            padding: 15px 30px;
            border: 2px solid #c0c0c0;
            border-radius: 50px;
            text-decoration: none;
            font-size: 1.2rem;
            transition: all 0.3s ease;
            display: inline-block;
            position: relative;
            overflow: hidden;
        }

        .cta-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(192, 192, 192, 0.3), transparent);
            transition: left 0.5s ease;
        }

        .cta-button:hover::before {
            left: 100%;
        }

        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(192, 192, 192, 0.3);
        }

        .features {
            padding: 100px 0;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .section-title {
            text-align: center;
            font-size: 3rem;
            margin-bottom: 60px;
            background: linear-gradient(45deg, #c0c0c0, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 40px;
            margin-top: 60px;
        }

        .feature-card {
            background: rgba(45, 45, 45, 0.8);
            padding: 40px;
            border-radius: 20px;
            border: 1px solid rgba(192, 192, 192, 0.2);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .feature-card::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #c0c0c0, transparent, #c0c0c0);
            z-index: -1;
            border-radius: 20px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .feature-card:hover::before {
            opacity: 1;
        }

        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        }

        .feature-icon {
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #c0c0c0, #ffffff);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            font-size: 24px;
            color: #1a1a1a;
        }

        .feature-card h3 {
            font-size: 1.8rem;
            margin-bottom: 15px;
            color: #ffffff;
        }

        .feature-card p {
            color: #b0b0b0;
            line-height: 1.6;
        }

        .stats {
            padding: 100px 0;
            background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 40px;
            text-align: center;
        }

        .stat-item {
            padding: 30px;
        }

        .stat-number {
            font-size: 3rem;
            font-weight: bold;
            background: linear-gradient(45deg, #c0c0c0, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 1.2rem;
            color: #b0b0b0;
        }

        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .floating-element {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #c0c0c0;
            border-radius: 50%;
            opacity: 0.6;
            animation: float 6s ease-in-out infinite;
        }

        .scroll-indicator {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            color: #c0c0c0;
            font-size: 14px;
            animation: bounce 2s ease-in-out infinite;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes shimmer {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateX(-50%) translateY(0); }
            40% { transform: translateX(-50%) translateY(-10px); }
            60% { transform: translateX(-50%) translateY(-5px); }
        }

        .tech-stack {
            padding: 100px 0;
            background: rgba(0, 0, 0, 0.9);
        }

        .tech-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }

        .tech-item {
            text-align: center;
            padding: 30px;
            background: rgba(45, 45, 45, 0.6);
            border-radius: 15px;
            border: 1px solid rgba(192, 192, 192, 0.1);
            transition: all 0.3s ease;
        }

        .tech-item:hover {
            background: rgba(45, 45, 45, 0.8);
            border-color: rgba(192, 192, 192, 0.3);
            transform: translateY(-5px);
        }

        .tech-item h4 {
            color: #c0c0c0;
            margin-bottom: 10px;
            font-size: 1.2rem;
        }

        .tech-item p {
            color: #909090;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2.5rem;
            }
            .hero p {
                font-size: 1.2rem;
            }
            .nav-links {
                display: none;
            }
            .features-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="custom-cursor"></div>
    
    <div id="canvas-container"></div>
    
    <div class="floating-elements">
        <div class="floating-element" style="top: 20%; left: 10%; animation-delay: 0s;"></div>
        <div class="floating-element" style="top: 30%; left: 80%; animation-delay: 2s;"></div>
        <div class="floating-element" style="top: 60%; left: 15%; animation-delay: 4s;"></div>
        <div class="floating-element" style="top: 70%; left: 90%; animation-delay: 1s;"></div>
        <div class="floating-element" style="top: 10%; left: 60%; animation-delay: 3s;"></div>
    </div>

    <nav class="navbar">
        <div class="nav-content">
            <div class="logo">AI NEXUS</div>
            <div class="nav-links">
                <a href="#home">Home</a>
                <a href="#features">Features</a>
                <a href="#technology">Technology</a>
                <a href="#stats">Performance</a>
                <a href="#contact">Contact</a>
            </div>
        </div>
    </nav>

    <section class="hero" id="home">
        <div class="hero-content">
            <h1>AI NEXUS</h1>
            <p>The Ultimate Multi-LLM Intelligence Platform</p>
            <p>Access responses from multiple LLMs, select the best one, and measure accuracy with unprecedented precision</p>
            <a href="#features" class="cta-button">Explore Intelligence</a>
        </div>
        <div class="scroll-indicator">
            <div>↓ Scroll to discover</div>
        </div>
    </section>

    <section class="features" id="features">
        <div class="container">
            <h2 class="section-title">Revolutionary Features</h2>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">🧠</div>
                    <h3>Multi-LLM Integration</h3>
                    <p>Seamlessly connect with multiple large language models including GPT-4, Claude, Gemini, and more. Our platform aggregates responses from various AI systems to provide comprehensive insights.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">⚡</div>
                    <h3>Smart Response Selection</h3>
                    <p>Our advanced algorithm automatically selects the best response based on context, accuracy, and relevance. No more sifting through multiple outputs - get the optimal answer every time.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">📊</div>
                    <h3>Accuracy Measurement</h3>
                    <p>Real-time accuracy scoring and performance metrics for each LLM response. Track model performance, identify patterns, and optimize your AI workflow with detailed analytics.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🔄</div>
                    <h3>Intelligent Routing</h3>
                    <p>Dynamic request routing based on query type, model expertise, and historical performance. Ensure each question reaches the most suitable AI model for optimal results.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🛡️</div>
                    <h3>Enterprise Security</h3>
                    <p>Bank-level encryption, secure API handling, and complete data privacy. Your conversations and data remain protected with enterprise-grade security measures.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🚀</div>
                    <h3>Lightning Fast</h3>
                    <p>Optimized for speed with parallel processing, intelligent caching, and real-time streaming. Get instant responses without compromising on quality or accuracy.</p>
                </div>
            </div>
        </div>
    </section>

    <section class="stats" id="stats">
        <div class="container">
            <h2 class="section-title">Performance Metrics</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number">99.7%</div>
                    <div class="stat-label">Accuracy Rate</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">< 200ms</div>
                    <div class="stat-label">Response Time</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">15+</div>
                    <div class="stat-label">Integrated LLMs</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">1M+</div>
                    <div class="stat-label">Queries Processed</div>
                </div>
            </div>
        </div>
    </section>

    <section class="tech-stack" id="technology">
        <div class="container">
            <h2 class="section-title">Technology Stack</h2>
            <div class="tech-grid">
                <div class="tech-item">
                    <h4>OpenAI GPT-4</h4>
                    <p>Advanced reasoning and creativity</p>
                </div>
                <div class="tech-item">
                    <h4>Anthropic Claude</h4>
                    <p>Helpful, harmless, and honest AI</p>
                </div>
                <div class="tech-item">
                    <h4>Google Gemini</h4>
                    <p>Multimodal AI capabilities</p>
                </div>
                <div class="tech-item">
                    <h4>Meta LLaMA</h4>
                    <p>Open-source language models</p>
                </div>
                <div class="tech-item">
                    <h4>Cohere Command</h4>
                    <p>Enterprise-focused AI</p>
                </div>
                <div class="tech-item">
                    <h4>Mistral AI</h4>
                    <p>Efficient frontier models</p>
                </div>
                <div class="tech-item">
                    <h4>Real-time Analytics</h4>
                    <p>Performance monitoring</p>
                </div>
                <div class="tech-item">
                    <h4>Neural Routing</h4>
                    <p>Intelligent query distribution</p>
                </div>
            </div>
        </div>
    </section>

    <script>
        // Custom cursor
        const cursor = document.querySelector('.custom-cursor');
        const interactiveElements = document.querySelectorAll('a, button, .feature-card');

        document.addEventListener('mousemove', (e) => {
            cursor.style.left = e.clientX + 'px';
            cursor.style.top = e.clientY + 'px';
        });

        interactiveElements.forEach(el => {
            el.addEventListener('mouseenter', () => cursor.classList.add('hover'));
            el.addEventListener('mouseleave', () => cursor.classList.remove('hover'));
        });

        // Three.js 3D Background
        let scene, camera, renderer, particles;

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.getElementById('canvas-container').appendChild(renderer.domElement);

            // Create particle system
            const particleGeometry = new THREE.BufferGeometry();
            const particleCount = 1000;
            const posArray = new Float32Array(particleCount * 3);
            const colorArray = new Float32Array(particleCount * 3);

            for (let i = 0; i < particleCount * 3; i++) {
                posArray[i] = (Math.random() - 0.5) * 100;
                colorArray[i] = 0.7 + Math.random() * 0.3; // Silver color variations
            }

            particleGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
            particleGeometry.setAttribute('color', new THREE.BufferAttribute(colorArray, 3));

            const particleMaterial = new THREE.PointsMaterial({
                size: 0.8,
                vertexColors: true,
                transparent: true,
                opacity: 0.8
            });

            particles = new THREE.Points(particleGeometry, particleMaterial);
            scene.add(particles);

            // Create geometric shapes
            const geometries = [
                new THREE.TetrahedronGeometry(1),
                new THREE.OctahedronGeometry(1),
                new THREE.IcosahedronGeometry(1)
            ];

            for (let i = 0; i < 20; i++) {
                const geometry = geometries[Math.floor(Math.random() * geometries.length)];
                const material = new THREE.MeshBasicMaterial({
                    color: 0xc0c0c0,
                    wireframe: true,
                    transparent: true,
                    opacity: 0.3
                });
                const mesh = new THREE.Mesh(geometry, material);
                mesh.position.set(
                    (Math.random() - 0.5) * 50,
                    (Math.random() - 0.5) * 50,
                    (Math.random() - 0.5) * 50
                );
                mesh.rotation.set(
                    Math.random() * Math.PI,
                    Math.random() * Math.PI,
                    Math.random() * Math.PI
                );
                scene.add(mesh);
            }

            camera.position.z = 30;
            animate();
        }

        function animate() {
            requestAnimationFrame(animate);

            // Rotate particles
            particles.rotation.y += 0.001;
            particles.rotation.x += 0.0005;

            // Animate geometric shapes
            scene.children.forEach((child, index) => {
                if (child instanceof THREE.Mesh) {
                    child.rotation.x += 0.005;
                    child.rotation.y += 0.005;
                    child.position.y += Math.sin(Date.now() * 0.001 + index) * 0.01;
                }
            });

            renderer.render(scene, camera);
        }

        // Smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Intersection Observer for animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Counter animation
        function animateCounter(element, target) {
            let count = 0;
            const increment = target / 100;
            const timer = setInterval(() => {
                count += increment;
                if (count >= target) {
                    element.textContent = target.toString().includes('.') ? target.toFixed(1) + '%' : target.toLocaleString();
                    clearInterval(timer);
                } else {
                    element.textContent = count.toString().includes('.') ? count.toFixed(1) + '%' : Math.floor(count).toLocaleString();
                }
            }, 20);
        }

        // Initialize
        window.addEventListener('load', () => {
            init();
            
            // Animate elements on scroll
            document.querySelectorAll('.feature-card, .stat-item').forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(50px)';
                el.style.transition = 'all 0.6s ease';
                observer.observe(el);
            });

            // Animate counters when visible
            const statNumbers = document.querySelectorAll('.stat-number');
            const statObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const text = entry.target.textContent;
                        if (text.includes('%')) {
                            animateCounter(entry.target, parseFloat(text));
                        } else if (text.includes('ms')) {
                            entry.target.textContent = '< 200ms';
                        } else if (text.includes('+')) {
                            const num = parseInt(text.replace(/[^\d]/g, ''));
                            animateCounter(entry.target, num);
                        }
                    }
                });
            }, observerOptions);

            statNumbers.forEach(stat => statObserver.observe(stat));
        });

        // Responsive handling
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Parallax effect
        window.addEventListener('scroll', () => {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;
            if (particles) {
                particles.rotation.y = scrolled * 0.0005;
            }
        });
    </script>
</body>
</html>